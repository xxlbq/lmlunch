<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
	<!--	 ======================== FILTER CHAIN ======================= -->


	<!--	FilterChainProxy会按顺序来调用这些filter	-->
	<!--	CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON定义了url比较前先转为小写， -->
	<!--	PATTERN_TYPE_APACHE_ANT定义了使用Apache ant的匹配模式 -->

	<bean id="filterChainProxy"	
		class="org.acegisecurity.util.FilterChainProxy">
		
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/**=httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
			</value>
		</property>
	</bean>

	<!--,rememberMeProcessingFilter,securityContextHolderAwareRequestFilter ,anonymousProcessingFilter-->

	<!--	 ======================== FILTER ======================= -->

	<!--	根据session中存放的信息组装ContextHolder。ContextHolder主要用于存放SecureContext，-->
	<!--	包括用户的权限信息 
		if Authentication success, 
		then Updated SecurityContextHolder to contain the following Authentication:
		org.acegisecurity.providers.UsernamePasswordAuthenticationToken
		
		for example:
		httpSession.setAttribute(ACEGI_SECURITY_CONTEXT_KEY, SecurityContextHolder.getContext());
		每次request前 HttpSessionContextIntegrationFilter从Session中获取Authentication对象
		在request完后, 又把Authentication对象保存到Session中供下次request使用,
		此filter必须在其他Acegi filter前使用，使之能跨越多个请求。
	-->

	<bean id="httpSessionContextIntegrationFilter"	
		class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" >
		<property name="forceEagerSessionCreation" value="true" />
	</bean>

	<bean id="logoutFilter"
		class="org.acegisecurity.ui.logout.LogoutFilter">
		<!--	logoutSuccessUrl -> URL redirected to after logout -->
		<!--	public LogoutFilter(String logoutSuccessUrl, LogoutHandler[] handlers) -->
<!--		<constructor-arg value="/login_acegi.jsp" />-->
		<constructor-arg value="/login.jsp" />
		
		<constructor-arg>
			<list>
<!--				<ref bean="rememberMeServices" />-->
				<bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
<!--		<property name="filterProcessesUrl" value="/logout.do" />-->
		<property name="filterProcessesUrl" value="/acegiLogout.out" />
	</bean>



	<!--	处理认证请求（通常是一个登录页面的表单请求）-->
	<!--	 Processes an authentication form.
			<p>Login forms must present two parameters to this filter:
			 a username and password.
				The parameter names to use are contained in the static fields 
				{@link #ACEGI_SECURITY_FORM_USERNAME_KEY}   j_username
			and {@link #ACEGI_SECURITY_FORM_PASSWORD_KEY}   j_password
			-->

	<bean id="authenticationProcessingFilter"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">

		<property name="authenticationManager" 
			ref="authenticationManager" />

		<!--认证失败后，重定向的url-->
		<property name="authenticationFailureUrl"
			value="/error.jsp?error=authentication_wrong" />
			
		<!--认证成功后，重定向的url-->
		<property name="defaultTargetUrl"
			value="/introduce.jsp" />
			
		<!--登陆请求的地址 既 login action 的 <form action='/login.do'>-->
		<property name="filterProcessesUrl" value="/acegiLogin.inxx" />
		
		<!--出现异常所对应的地址-->
		<property name="exceptionMappings">
			<!--		登陆失败 出现具体异常时的跳转 -->
			<value>
				org.acegisecurity.userdetails.UsernameNotFoundException=/error.jsp?error=UsernameNotFoundException
				org.acegisecurity.concurrentConcurrentLoginException   =/error.jsp?error=concurrentConcurrentLoginException
				org.acegisecurity.AuthenticationException              =/error.jsp?error=authenticationExceptionMappings
			</value>
		</property>

<!--		<property name="rememberMeServices" ref="rememberMeServices" />-->
	</bean>


	<bean id="rememberMeServices"
		class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="userDetailsServiceImp" />
		<property name="key">
			<value>springRocks</value>
		</property>
	</bean>


	<bean id="rememberMeProcessingFilter"
		class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
		<property name="authenticationManager">
			<ref local="authenticationManager" />
		</property>
		<property name="rememberMeServices">
			<ref local="rememberMeServices" />
		</property>
	</bean>

	<bean id="rememberMeAuthenticationProvider"
		class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
		<property name="key"><value>springRocks</value></property>
	</bean>


	<!--	记录事件-->
	<bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener" />


	<!-- ======================== AUTHENTICATION ======================= -->
	<!--	authenticationManager（认证管理器）用于管理多个AuthenticationProvider（认证提供者）。-->
	<!--		它的作用是使你能够通过多个不同的认证管理源来对用户进行认证。 -->

	<!--	它将验证的功能委托给多个Provider，并通过遍历Providers,-->
	<!--		以保证获取不同来源的身份认证，若某个Provider能成功确认当前用户的身份-->
	<!--		，authenticate()方法会返回一个完整的包含用户授权信息的Authentication对象，-->
	<!--		否则会抛出一个AuthenticationException。-->


	<bean id="authenticationManager"
		class="org.acegisecurity.providers.ProviderManager">

		<property name="providers">
			<list>
				<!--基于数据库的认证提供者-->
				<ref local="daoAuthenticationProvider" />
				<ref local="rememberMeAuthenticationProvider" />
				<!--匿名用户处理。如果用户尚未登录，
					将生成一个匿名用户的Authentication存放到ContextHolder中-->
<!--				<ref local="anonymousAuthenticationProvider"/>-->
			</list>
		</property>

		<property name="sessionController" ref="concurrentSessionController" />
	</bean>




	<!-- 设置 session 控制,如 允许几个用户同时登录 -->
	<!--	Acegi Security is able to prevent a principal 
		from concurrently authenticating to the same application more than
		a specified number of times. Many ISVs take advantage of this to enforce licensing,
		whilst network administrators like this feature because it helps prevent people from 
		sharing login names. You can, for example, 
		stop user "Batman" from logging onto the web application from two different sessions.-->

	<!--	To use concurrent session support, you'll need to add the following to web.xml:-->

	<!--	<listener> -->
	<!--		<listener-class>org.acegisecurity.ui.session.HttpSessionEventPublisher</listener-class>-->
	<!--	</listener> -->

	<bean id="concurrentSessionController"
		class="org.acegisecurity.concurrent.ConcurrentSessionControllerImpl">

		<!--	每个用户同时最多可以登录几位	-->
		<property name="maximumSessions" value="1" />
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="exceptionIfMaximumExceeded" value="true" />
	</bean>

	<bean id="sessionRegistry" class="org.acegisecurity.concurrent.SessionRegistryImpl" />






	<!--	进行简单的基于数据库的身份验证。-->
	<!--		DaoAuthenticationProvider获取数据库中的账号密码并进行匹配，-->
	<!--		若成功则在通过用户身份的同时返回一个包含授权信息的Authentication对象，-->
	<!--		否则身份验证失败，抛出一个AuthenticatiionException。-->

	<!--			DaoAuthenticationProvider的authenticate方法。-->

	<bean id="daoAuthenticationProvider"
		class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">

		<property name="userDetailsService" ref="userDetailsServiceImp" />

		<!--		<property name="userCache">-->
		<!--			<bean class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">-->
		<!--				<property name="cache">-->
		<!--					<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">-->
		<!--						<property name="cacheManager">-->
		<!--							<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />-->
		<!--						</property>-->
		<!--						<property name="cacheName" value="userCache" />-->
		<!--					</bean>-->
		<!--				</property>-->
		<!--			</bean>-->
		<!--		</property>-->
	</bean>

	<bean id="userDetailsServiceImp"
		class="com.livedoor.flow_manager.common.acegi.UserDetailsServiceImp">
		<property name="userService" ref="userService" />
	</bean>


	<!-- UserDetailsService is the most commonly frequently Acegi Security interface implemented by end users -->
	<!--	<bean id="userDetailsServiceImp" class="org.acegisecurity.userdetails.memory.InMemoryDaoImpl">-->
	<!--		<property name="userProperties">-->
	<!--			<bean class="org.springframework.beans.factory.config.PropertiesFactoryBean">-->
	<!--				<property name="location" value="/WEB-INF/conf/spring/users.properties"/>-->
	<!--			</bean>-->
	<!--		</property>-->
	<!--	</bean>-->


	<bean id="securityContextHolderAwareRequestFilter"
		class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter" />

	<!--
	若异常为 AccessDeniedException ，并且不是AnonymousException 则在request中
	ACEGI_SECURITY_ACCESS_DENIED_EXCEPTION_KEY 存放此AccessDeniedException对象
	(若为AnonymousException，则调用 sendStartAuthentication（）方法，
	清空securityContextHolder中的Authentication 对象)	
	
	当AuthenticationException 时同样清空securityContextHolder中的Authentication
	-->
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" 	ref="authenticationProcessingFilterEntryPoint" />
		<property name="accessDeniedHandler" 		ref="accessDeniedHandler" />
	</bean>

	<!-- 
	By setting the <em>forceHttps</em> property to true, 
	you may configure the class to force the protocol used
	for the login form to be <code>HTTPS</code>
	-->
	<bean id="authenticationProcessingFilterEntryPoint"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<property name="loginFormUrl"
			value="/error.jsp?error=please_login_with_https" />
		<property name="forceHttps" value="false" />
	</bean>
	
<!--  ###########	-->	
<!--  权限不足异常 	-->
<!--  ###########	-->
	<!-- /login_acegi.jsp 或者  '/'  有点注意的地方 jsp 中需要加入 <html:base/> 否则图片可以显示不正常-->
	<bean id="accessDeniedHandler" class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/error.jsp?error=access_denied" />
	</bean>



	<!-- 在定义权限时 注意用小写 如:	showsourcesearch.do -->

	<bean id="filterInvocationInterceptor"
		class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		
		<property name="authenticationManager" 	ref="authenticationManager" />
		<property name="accessDecisionManager" 	ref="httpRequestURLAccessDecisionManager" />
<!--		<property name="alwaysReauthenticate" 	value="true"/>-->
		
		<property name="runAsManager"><ref bean="runAsManager"/></property>
		
		<property name="objectDefinitionSource">
			<!--	/**=ROLE_SUPERVISOR      ROLE_NORMAL     /secure/extreme/**=ROLE_ANONYMOUS	/login_acegi.jsp=ROLE_ANONYMOUS,ROLE_NORMAL,ROLE_SUPERVISOR-->
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/displaysourcemanage.do=ROLE_SUPERVISOR,ROLE_NORMAL
				/lubq_marry.do=ROLE_NORMAL
			</value>
		</property>
	</bean>

<!--					/admin/**=ROLE_SUPERVISOR,ROLE_NORMAL-->






	<!--	Acegi安全系统中，使用投票策略的AccessDecisionManager共有三个具体实现类：
		AffirmativeBased、ConsensusBased和UnanimousBased。
		它们的投票策略是，	
		AffirmativeBased	类只需有一个投票赞成即可通过；
		ConsensusBased		类需要大多数投票赞成即可通过；
		UnanimousBased		类需要所有的投票赞成才能通过。-->

	<bean id="httpRequestURLAccessDecisionManager"
		class="org.acegisecurity.vote.AffirmativeBased">

		<!--	AffirmativeBased类，它对于用户授权的投票策略是，只要通过其中的一个授权投票检查，
			即可通过；它的allowIfAllAbstainDecisions属性值默认是false，
			意思是如果所有的授权投票是都是弃权，则通不过授权检查。-->

		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
				<bean class="org.acegisecurity.vote.AuthenticatedVoter" />
			</list>
		</property>
	</bean>




	<!--	RoleVoter类是一个Acegi安全系统AccessDecisionVoter接口的实现。-->
	<!--			如果ConfigAttribute以ROLE_开头，RoleVoter则进行投票。-->
	<!--			如果GrantedAuthority的getAutority方法的String返回值匹配一个或多个以ROLE_开头的ConfigAttribute，-->
	<!--				则投票通过，否则不通过。-->
	<!--			如果没有以ROLE_开头的ConfigAttribute，RoleVoter则弃权。-->


	<!--		AccessDecisionManager则根据投票结果来决定是通过授权检查，还是抛出AccessDeniedException例外。-->
	<!--			AccessDecisionVoter接口共有三个方法：-->
	<!--		public int vote(Authentication authentication, Object object, ConfigAttributeDefinition config);-->
	<!--		public boolean supports(ConfigAttribute attribute);-->
	<!--		public boolean supports(Class clazz);-->
	<!--       	其中的vote方法返回int返回值，它们是AccessDecisionVoter的三个静态成员属性：-->
	<!--       		ACCESS_ABSTAIN,，ACCESS_DENIED和ACCESS_GRANTED，它们分别是弃权，否决和赞成。-->

	<bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter">
		<property name="rolePrefix">
			<value>ROLE_</value><!-- 权限字符串前缀 -->
		</property>
	</bean>




	<!--	As explained earlier, the benefit of anonymous authentication is 	-->
	<!--		that all URI patterns can have security applied					-->
	<!--		to them															-->

	<bean id="anonymousProcessingFilter"
		class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="foobar" />
		<property name="userAttribute">
			<value>anonymousUser,ROLE_ANONYMOUS</value>
		</property>
	</bean>

	<bean id="anonymousAuthenticationProvider"
		class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
		<property name="key" value="foobar" />
	</bean>




	<bean id="runAsManager" class="org.acegisecurity.runas.RunAsManagerImpl">
		<property name="key"><value>my_run_as_password</value></property>
	</bean>

	<bean id="runAsAuthenticationProvider" class="org.acegisecurity.runas.RunAsImplAuthenticationProvider">
		<property name="key"><value>my_run_as_password</value></property>
	</bean>

	<!-- ================= METHOD INVOCATION AUTHORIZATION ==================== -->

	<!-- getRandomContact() is public.
		
		The create, getAll, getById etc have ROLE_USER to ensure user is
		authenticated (all users hold ROLE_USER in this application).
		
		The delete and update methods don't need a ROLE_USER as they will
		ensure the user is authenticated via their ACL_CONTACT_DELETE or
		ACL_CONTACT_READ attribute, which also ensures the user has permission
		to the Contact presented as a method argument.
	-->
	<bean id="myMethodInterceptor"
		class="org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
		
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="httpRequestURLAccessDecisionManager" />
		<property name="runAsManager"><ref bean="runAsManager"/></property>
		<!--      <property name="afterInvocationManager"><ref local="afterInvocationManager"/></property>-->
		<property name="objectDefinitionSource">
			<value>
				com.livedoor.flow_manager.sources.service.SourceService.add*=ROLE_SUPERVISOR
				com.livedoor.flow_manager.sources.service.SourceService.update*=ROLE_SUPERVISOR
				com.livedoor.flow_manager.sources.service.SourceService.delete*=ROLE_SUPERVISOR
				com.livedoor.flow_manager.sources.service.SourceService.queryAll*=ROLE_SUPERVISOR,ROLE_NORMAL,ROLE_ANONYMOUS
				com.livedoor.flow_manager.sources.service.SourceService.get*=ROLE_SUPERVISOR,ROLE_NORMAL,ROLE_ANONYMOUS
			</value>
		</property>
	</bean>

</beans>

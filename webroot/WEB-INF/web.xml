<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.3" xmlns="http://JAVA.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/xmlSchema-instance"
	xsi:schemaLocation="http://JAVA.sun.com/xml/ns/j2ee http://JAVA.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<icon></icon>
	
	<display-name>permission</display-name>
	<description></description>
	<distributable/>
	<!-- Spring ApplicationContext配置文件的路径。可使用通配符，多个路径用逗号分隔。
	  此参数用于后面的“Spring-Context loader” -->	
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/conf/spring/applicationContext-permission.xml</param-value>
<!--		<param-value>classpath*:conf/spring/applicationContext-permission.xml</param-value>-->
	</context-param>
	
<!--========================================================--> 
<!--== hibernate filter OpenSessionInViewFilter	,在页面初次访问的时候请求数据库-->
<!--========================================================--> 
<!--	<filter>-->
<!--		<filter-name>hibernateFilter</filter-name>-->
<!--		<filter-class>-->
<!--			org.springframework.orm.hibernate3.support.OpenSessionInViewFilter-->
<!--		</filter-class>-->
<!--		<init-param>-->
<!--			<param-name>sessionFactoryBeanName</param-name> -->
<!--			<param-value>mySessionFactory</param-value>-->
<!--		</init-param>-->
<!--		<init-param>-->
<!--			<param-name>singleSession</param-name>-->
<!--			<param-value>false</param-value>-->
<!--		</init-param>-->
<!--	</filter>-->
<!--	<filter-mapping>-->
<!--		<filter-name>hibernateFilter</filter-name>-->
<!--		<url-pattern>*.do</url-pattern>-->
<!--	</filter-mapping>-->




<!--========================================================-->    
<!--==	filter-mapping 限定了FilterToBeanProxy的URL匹配模式,  -->
<!--==	只有*.do和*.jsp和/login.in 与 /logout.out的请求才会受到权限控制，-->
<!--==	对javascript,css,html等不限制。===-->
<!--========================================================-->

	<filter>
		<filter-name>SetCharacterEncoding</filter-name>
		<filter-class>
			com.livedoor.flow_manager.common.filter.URLEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>SetCharacterEncoding</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>



	<!--========================================================--> 	
<!--	Acegi安全控制 Filter 配置 -->
<!--	[FilterToBeanProxy]-->
<!--		Acegi通过实现了Filter接口的FilterToBeanProxy提供一种特殊的使用Servlet Filter的方式，-->
<!--			它委托Spring中的Bean  FilterChainProxy来完成过滤功能，-->
<!--			这好处是简化了web.xml的配置，充分利用了Spring IOC的优势。-->
<!--			FilterChainProxy包含了处理认证过程的filter列表，每个filter都有各自的功能。-->
<!--			-->
<!--========================================================-->
    <filter>
        <filter-name>securityFilter</filter-name>
        <filter-class>org.acegisecurity.util.FilterToBeanProxy</filter-class>
        <init-param>
            <param-name>targetClass</param-name>
            <param-value>org.acegisecurity.util.FilterChainProxy</param-value>
        </init-param>
    </filter>
    

    
<!--========================================================-->    
<!--==	filter-mapping 限定了FilterToBeanProxy的URL匹配模式,  -->
<!--==	只有*.do和*.jsp和/login.in 与 /logout.out的请求才会受到权限控制，-->
<!--==	对javascript,css,html等不限制。===-->
<!--========================================================-->
			
    <filter-mapping>
        <filter-name>securityFilter</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>    
	
<!--========================================================-->	
<!--==		acegi security                            -->
<!--== 		[login,logout] filter setup               -->
<!--========================================================--> 
   
	<filter-mapping>      
		<filter-name>securityFilter</filter-name>
		<url-pattern>/acegiLogin.in</url-pattern>
	</filter-mapping>
	<filter-mapping>      
		<filter-name>securityFilter</filter-name>
		<url-pattern>/acegiLogout.out</url-pattern>
	</filter-mapping>



<!--========================================================--> 	
<!--	sitemesh Filter 配置 -->
<!--========================================================-->   
    
    <filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
	</filter>
    <filter-mapping>
	     <filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
    
    


<!--========================================================-->	
<!--==		acegi security                            -->
<!--== 		Filter Chain interceptor setup            -->
<!--========================================================--> 
<!--	<filter>-->
<!--		<filter-name>Acegi HTTP Request Security Filter</filter-name>-->
<!--		<filter-class>org.acegisecurity.util.FilterToBeanProxy</filter-class>-->
<!--		<init-param>-->
<!--			<param-name>targetClass</param-name>-->
<!--			<param-value>org.acegisecurity.intercept.web.FilterSecurityInterceptor</param-value>-->
<!--		</init-param>-->
<!--	</filter>-->
<!--	-->
<!--	<filter-mapping>-->
<!--		<filter-name>Acegi HTTP Request Security Filter</filter-name>-->
<!--		<url-pattern>/*</url-pattern>-->
<!--	</filter-mapping>-->
	
	<filter>
		<filter-name>sessionFilter</filter-name>
		<filter-class>com.livedoor.flow_manager.common.filter.FrameSetSessionFilter</filter-class>
		<init-param>
			<param-name>responseHeaderKey</param-name>
			<param-value>P3P</param-value>
		</init-param>
		<init-param>
			<param-name>responseHeaderValue</param-name>
			<param-value>CP=CAO PSA OUR</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>sessionFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
<!--========================================================-->	
<!--==		URL rewriter 								-->
<!--== 		Filter Chain interceptor setup            	-->
<!--========================================================--> 
	<filter>
         <filter-name>UrlRewriteFilter</filter-name>
         <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    	  <init-param>
            <param-name>confPath</param-name>
            <param-value>/WEB-INF/urlrewrite.xml</param-value>
        </init-param>      
    </filter>
    
    <filter-mapping>
       	<filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/cust/*</url-pattern>
	</filter-mapping>
	
	
	<!-- filter> 
        <filter-name >indexCacheFilter</filter-name>
        <filter-class>net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter</filter-class>
	</filter> 

    <filter-mapping> 
        <filter-name>indexCacheFilter</filter-name>
        <url-pattern>/*login.jsp</url-pattern>
	</filter-mapping --> 
	
	
	
<!--	struts menu role filter  -->
	<!-- filter>
		<filter-name>strutsMenuRoleFilter</filter-name>
		<filter-class>com.livedoor.flow_manager.common.filter.StrustMenuRoleFilter</filter-class>
		<init-param>
			<param-name>responseHeaderKey</param-name>
			<param-value>P3P</param-value>
		</init-param>
		<init-param>
			<param-name>responseHeaderValue</param-name>
			<param-value>CP=CAO PSA OUR</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>strutsMenuRoleFilter</filter-name>
		<url-pattern>/ws/*</url-pattern>
		
	</filter-mapping-->
	
	
	
<!--	code filter setup-->
<!--	<filter>-->
<!--		<filter-name>sessionFilter</filter-name>-->
<!--		<filter-class>web.servlet.TestFilter</filter-class>-->
<!--		<init-param>-->
<!--			<param-name>encoding</param-name>-->
<!--			<param-value>GB2312</param-value>-->
<!--		</init-param>-->
<!--		<init-param>-->
<!--			<param-name>username</param-name>-->
<!--			<param-value>onlyyou</param-value>-->
<!--		</init-param>-->
<!--	</filter>-->
	


	<init-param>
		<param-name>databaseDriver</param-name>
		<param-value>com.p6spy.engine.spy.P6SpyDriver</param-value>
	</init-param>
	
<!--HttpSessionEventPublisher用于
			发布HttpSessionApplicationEvents和HttpSessionDestroyedEvent事件给spring的
			applicationcontext。通知acegi session destory 的事件.并 更新 session registry 
			如果不设置此 listener,即使用户已经 session timeout 也不能登录-->
<!--详见:org.acegisecurity.concurrent.SessionRegistryImpl	-->
	<listener>
		<listener-class>org.acegisecurity.ui.session.HttpSessionEventPublisher</listener-class>
	</listener>



	<!--========================================
		装载应用软件的Spring上下文
		要由WebapplicationContextUtils.getWebApplicationnContext(servletContext)得到.
		========================================-->
		
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<listener>
		<listener-class>
			com.livedoor.flow_manager.listener.PHttpSessionListener
		</listener-class>
	</listener>
			
	<!--========================================-->
	<!--	Struts Action Servlet Configuration -->
	<!--========================================-->

	<servlet>
		<servlet-name>struts-action</servlet-name>
		<servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
		<init-param>
			<param-name>config</param-name>
			<param-value>
						/WEB-INF/conf/struts/struts-config.xml,
						/WEB-INF/conf/struts/struts-config-source.xml,
						/WEB-INF/conf/struts/struts-config-common.xml,
						/WEB-INF/conf/struts/struts-config-action.xml
			</param-value>
		</init-param>
		<load-on-startup>3</load-on-startup>
	</servlet>

	
	<!--========================================-->	
	<!--  log4j servlet init class setup	-->
	<!--========================================-->
	<servlet> 
		<servlet-name>log4j-init</servlet-name> 
		<servlet-class>com.livedoor.flow_manager.common.servlet.Log4JInit</servlet-class> 
		<init-param> 
		<param-name>log4j-init-file</param-name> 
		<param-value>/WEB-INF/conf/log4j/log4j.properties</param-value> 
		</init-param> 
		<load-on-startup>2</load-on-startup> 
	</servlet>
	<servlet>
  		<servlet-name>velocity</servlet-name>
  		<servlet-class>org.apache.velocity.tools.view.servlet.VelocityViewServlet</servlet-class>                                            
		<init-param>
    		<param-name>org.apache.velocity.toolbox</param-name> 
    		<param-value>/WEB-INF/conf/velocity/toolbox.xml</param-value>      
 		</init-param>
 		
 		<init-param>
    		<param-name>properties</param-name> 
    		<param-value>/WEB-INF/conf/velocity/velocity.properties</param-value>      
 		</init-param>                                                  

 		<load-on-startup>10</load-on-startup>
	</servlet>
	
	<!--==========================================-->
	<!--	velocity Action Servlet Configuration -->
	<!--==========================================-->
	
	
	<servlet-mapping>
		<servlet-name>struts-action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<!-- Mapping *.vm files to Velocity -->
	<servlet-mapping>
		<servlet-name>velocity</servlet-name>
		<url-pattern>*.vm</url-pattern>      
	</servlet-mapping> 
	
	<session-config></session-config>
	
	<!-- The Usual Welcome File List -->
	<welcome-file-list>
<!--		<welcome-file>index.jsp</welcome-file>-->
<!--		<welcome-file>login_acegi.jsp</welcome-file>-->
		<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>

	<!--	strust taglib setup -->
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/struts-bean.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/struts-bean.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/struts-logic.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/struts-logic.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/struts-html.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/struts-html.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/struts-nested.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/struts-nested.tld</taglib-location>
	</taglib>
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/struts-tiles.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/struts-tiles.tld</taglib-location>
	</taglib>
	
	

	<!--	jstl taglib setup	-->
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/c.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/c.tld</taglib-location>
	</taglib>
<!--	<taglib>-->
<!--		<taglib-uri>/WEB-INF/sql</taglib-uri>-->
<!--		<taglib-location>/WEB-INF/conf/tld/sql.tld</taglib-location>-->
<!--	</taglib>-->

	<!--	pager taglib setup	-->
	<taglib>
  		<taglib-uri>/WEB-INF/conf/tld/pager-taglib.tld</taglib-uri>
  		<taglib-location>/WEB-INF/conf/tld/pager-taglib.tld</taglib-location>
	</taglib>
	<!--	pager taglib setup	-->
	<taglib>
  		<taglib-uri>/WEB-INF/conf/tld/struts-menu.tld</taglib-uri>
  		<taglib-location>/WEB-INF/conf/tld/struts-menu.tld</taglib-location>
	</taglib>


	<!--	sitemesh taglib setup	-->
	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/sitemesh-decorator.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/sitemesh-decorator.tld</taglib-location>
	</taglib>

	<taglib>
		<taglib-uri>/WEB-INF/conf/tld/sitemesh-page.tld</taglib-uri>
		<taglib-location>/WEB-INF/conf/tld/sitemesh-page.tld</taglib-location>
	</taglib>


</web-app>
